<?php /** @noinspection PhpUnhandledExceptionInspection */

use eftec\PdoOne;

include '../vendor/autoload.php';

// connecting to database sakila at 127.0.0.1 with user root and password abc.123

$dao = new PdoOne('mysql', '127.0.0.1', 'root', 'abc.123', 'sakila', 'logpdoone.txt');
$dao->logLevel = 3;
$dao->throwOnError = true;
$dao->open();
echo "<pre>";


FilmRepo::setPdoOne($dao);

var_dump(FilmRepo::validTable());

/**
 * Generated by PdoOne Version 1.31
 * Class FilmRepo
 */
class FilmRepo
{
    const TABLE = 'film';
    const PK = 'film_id';
    const DEF=[
        "film_id" => "smallint unsigned not null auto_increment",
        "title" => "varchar(255) not null",
        "description" => "text",
        "release_year" => "year",
        "language_id" => "tinyint unsigned not null",
        "original_language_id" => "tinyint unsigned",
        "rental_duration" => "tinyint unsigned not null default '3'",
        "rental_rate" => "decimal(4,2) not null default '4.99'",
        "length" => "smallint unsigned",
        "replacement_cost" => "decimal(5,2) not null default '19.99'",
        "rating" => "enum('G','PG','PG-13','R','NC-17') default 'G'",
        "special_features" => "set('Trailers','Commentaries','Deleted Scenes','Behind the Scenes')",
        "last_update" => "timestamp not null default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP"
    ];
    const DEFKEY=[
        "film_id" => "PRIMARY KEY",
        "title" => "KEY",
        "language_id" => "KEY",
        "original_language_id" => "KEY"
    ];
    const DEFFK=[
        "language_id" => "FOREIGN KEY REFERENCES`language`(`language_id`) ON UPDATE CASCADE",
        "original_language_id" => "FOREIGN KEY REFERENCES`language`(`language_id`) ON UPDATE CASCADE"
    ];

    /** @var PdoOne */
    public static $pdoOne = null;

    /**
     * It creates a new table<br>
     * If the table exists then the operation is ignored (and it returns false)
     *
     * @param array $definition
     * @param null  $extra
     *
     * @return array|bool|PDOStatement
     * @throws Exception
     */
    public static function createTable( $extra = null) {
        if (!self::getPdoOne()->tableExist(self::TABLE)) {
            return self::getPdoOne()->createTable(self::TABLE, $definition=self::DEF, self::DEFKEY,self::DEFFK, $extra);
        }
        return false; // table already exist
    }

    /**
     * It validates the table and returns an associative array with the errors.
     *
     * @return array If valid then it returns an empty array
     * @throws Exception
     */
    public static function validTable() {
        return self::getPdoOne()->validateDefTable(self::TABLE,self::DEF,self::DEFKEY,self::DEFFK);
    }

    /**
     * It is used for DI.<br>
     * If the field is not null, it returns the field self::$pdoOne<br>
     * If the global function pdoOne exists, then it is used<br>
     * if the globla variable $pdoOne exists, then it is used<br>
     * Otherwise, it returns null
     *
     * @return PdoOne
     */
    protected static function getPdoOne() {
        if (self::$pdoOne !== null) {
            return self::$pdoOne;
        }
        if (function_exists('pdoOne')) {
            return pdoOne();
        }
        if (isset($GLOBALS['pdoOne'])) {
            return $GLOBALS['pdoOne'];
        }
        return null;
    }

    /**
     * It sets the field self::$pdoOne
     *
     * @param $pdoOne
     */
    public static function setPdoOne($pdoOne) {
        self::$pdoOne = $pdoOne;
    }

    /**
     * It cleans the whole table (delete all rows)
     *
     * @return array|bool|PDOStatement
     * @throws Exception
     */
    public static function truncate() {
        return self::getPdoOne()->truncate(self::TABLE);
    }

    /**
     * It drops the table (structure and values)
     *
     * @return array|bool|PDOStatement
     * @throws Exception
     */
    public static function dropTable() {
        if (!self::getPdoOne()->tableExist(self::TABLE)) {
            return self::getPdoOne()->dropTable(self::TABLE);
        }
        return false; // table does not exist
    }

    /**
     * Insert an new row
     *
     * @param array $obj =["film_id"=>0,"title"=>'',"description"=>'',"release_year"=>0,"language_id"=>0,"original_language_id"=>0,"rental_duration"=>0,"rental_rate"=>0.0,"length"=>0,"replacement_cost"=>0.0,"rating"=>'',"special_features"=>'',"last_update"=>'']
     *
     * @return mixed
     * @throws Exception
     */
    public static function insert($obj) {
        return self::getPdoOne()->insertObject(self::TABLE, $obj);
    }

    /**
     * Update an registry
     *
     * @param array $obj =["film_id"=>0,"title"=>'',"description"=>'',"release_year"=>0,"language_id"=>0,"original_language_id"=>0,"rental_duration"=>0,"rental_rate"=>0.0,"length"=>0,"replacement_cost"=>0.0,"rating"=>'',"special_features"=>'',"last_update"=>'']
     *
     * @return mixed
     * @throws Exception
     */
    public static function update($obj) {
        return self::getPdoOne()->from(self::TABLE)
            ->set($obj)
            ->where(self::PK, $obj[self::PK])
            ->update();
    }

    /**
     * It deletes a registry
     *
     * @param mixed $pk
     *
     * @return mixed
     * @throws Exception
     */
    public static function delete($pk) {
        return self::getPdoOne()->from(self::TABLE)
            ->where(self::PK, $pk)
            ->delete();
    }

    /**
     * It gets a registry using the primary key.
     *
     * @param mixed $pk
     *
     * @return ["film_id"=>0,"title"=>'',"description"=>'',"release_year"=>0,"language_id"=>0,"original_language_id"=>0,"rental_duration"=>0,"rental_rate"=>0.0,"length"=>0,"replacement_cost"=>0.0,"rating"=>'',"special_features"=>'',"last_update"=>'']
     * @throws Exception
     */
    public static function get($pk) {
        return self::getPdoOne()->select('*')
            ->from(self::TABLE)
            ->where(self::PK, $pk)
            ->first();
    }

    /**
     * It returns a list of rows
     *
     * @param null|array $where =["film_id"=>0,"title"=>'',"description"=>'',"release_year"=>0,"language_id"=>0,"original_language_id"=>0,"rental_duration"=>0,"rental_rate"=>0.0,"length"=>0,"replacement_cost"=>0.0,"rating"=>'',"special_features"=>'',"last_update"=>'']
     * @param null|string $order
     * @param null|string $limit
     *
     * @return [["film_id"=>0,"title"=>'',"description"=>'',"release_year"=>0,"language_id"=>0,"original_language_id"=>0,"rental_duration"=>0,"rental_rate"=>0.0,"length"=>0,"replacement_cost"=>0.0,"rating"=>'',"special_features"=>'',"last_update"=>'']]
     * @throws Exception
     */
    public static function select($where = null, $order = null, $limit = null) {
        return self::getPdoOne()->select('*')
            ->from(self::TABLE)
            ->where($where)
            ->order($order)
            ->limit($limit)
            ->toList();
    }

    /**
     * It returns the number of rows
     *
     * @param null|array $where =["film_id"=>0,"title"=>'',"description"=>'',"release_year"=>0,"language_id"=>0,"original_language_id"=>0,"rental_duration"=>0,"rental_rate"=>0.0,"length"=>0,"replacement_cost"=>0.0,"rating"=>'',"special_features"=>'',"last_update"=>'']
     *
     * @return int
     * @throws Exception
     */
    public static function count($where = null) {
        return (int)self::getPdoOne()->count()
            ->from(self::TABLE)
            ->where($where)
            ->firstScalar();
    }
}