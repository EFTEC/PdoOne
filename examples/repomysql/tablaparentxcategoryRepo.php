<?php
/** @noinspection PhpUnused */
namespace repo;
use eftec\PdoOne;
use eftec\_BasePdoOneRepo;

/**
 * Generated by PdoOne Version 1.42 Date generated Sun, 31 May 2020 08:37:56 -0400
 * @copyright (c) Jorge Castro C. MIT License  https://github.com/EFTEC/PdoOne 
 * Class TablaparentxcategoryRepo
 */
class TablaparentxcategoryRepo extends _BasePdoOneRepo
{
    const TABLE = 'tablaparentxcategory';
    const PK = [
	    'idtablaparentPKFK',
	    'idcategoryPKFK'
	];
    const ME=__CLASS__;   
    
    /**
     * It returns the definitions of the columns<br>
     * <b>Example:</b><br>
     * <pre>
     * self::getDef(); // ['colName'=>[php type,php conversion type,type,size,nullable,extra,sql],'colName2'=>..]
     * self::getDef('sql'); // ['colName'=>'sql','colname2'=>'sql2']
     * self::getDef('identity',true); // it returns the columns that are identities ['col1','col2']
     * </pre>
     * <b>PHP Types</b>: binary, date, datetime, decimal,int, string,time, timestamp<br>
     * <b>PHP Conversions</b>: datetime3 (human string), datetime2 (iso), timestamp (int), bool, int, float<br>
     * <b>Param Types</b>: PDO::PARAM_LOB, PDO::PARAM_STR, PDO::PARAM_INT<br>     
     *
     * @param string|null $column =['phptype','conversion','type','size','null','identity','sql'][$i]
     *                             if not null then it only returns the column specified.
     * @param string|null $filter If filter is not null, then it uses the column to filter the result.
     *
     * @return array|array[]
     */    
    public static function getDef($column=null,$filter=null) {
       $r = [
		    'idtablaparentPKFK' => [
		        'phptype' => 'int',
		        'conversion' => NULL,
		        'type' => 'int',
		        'size' => NULL,
		        'null' => FALSE,
		        'identity' => FALSE,
		        'sql' => 'int not null'
		    ],
		    'idcategoryPKFK' => [
		        'phptype' => 'int',
		        'conversion' => NULL,
		        'type' => 'int',
		        'size' => NULL,
		        'null' => FALSE,
		        'identity' => FALSE,
		        'sql' => 'int not null'
		    ]
		];
       if($column!==null) {
            if($filter===null) {
                foreach($r as $k=>$v) {
                    $r[$k]=$v[$column];
                }
            } else {
                $new=[];
                foreach($r as $k=>$v) {
                    if($v[$column]===$filter) {
                        $new[]=$k;
                    }                    
                }
                return $new;
            }
        }
        return $r;        
    }
    
    /**
     * It gets all the name of the columns.
     * 
     * @return string[]
     */
    public static function getDefName() {
        return [
		    'idtablaparentPKFK',
		    'idcategoryPKFK'
		];
    }
    
    /**
     * It returns an associative array (colname=>key type) with all the keys/indexes (if any)
     * 
     * @return string[]
     */    
    public static function getDefKey() {
        return [
		    'idtablaparentPKFK' => 'PRIMARY KEY',
		    'idcategoryPKFK' => 'PRIMARY KEY'
		];
    }
    public static function getDefIdentity() {
        return [

		];
    }
    public static function getDefFK($structure=false) {
        if ($structure) {
            return [
			    'idcategoryPKFK' => 'FOREIGN KEY REFERENCES`tablacategory`(`IdTablaCategoryPK`)',
			    'idtablaparentPKFK' => 'FOREIGN KEY REFERENCES`tablaParent`(`idtablaparentPK`)'
			];
        }
        /* key,refcol,reftable,extra */
        return [
		    'idcategoryPKFK' => [
		        'key' => 'FOREIGN KEY',
		        'refcol' => 'IdTablaCategoryPK',
		        'reftable' => 'tablacategory',
		        'extra' => '',
		        'name' => 'tablaparentxcategory_fk2'
		    ],
		    '/idcategoryPKFK' => [
		        'key' => 'ONETOONE',
		        'refcol' => 'IdTablaCategoryPK',
		        'reftable' => 'tablacategory',
		        'extra' => '',
		        'name' => 'tablaparentxcategory_fk2'
		    ],
		    'idtablaparentPKFK' => [
		        'key' => 'FOREIGN KEY',
		        'refcol' => 'idtablaparentPK',
		        'reftable' => 'tablaParent',
		        'extra' => '',
		        'name' => 'tablaparentxcategory_fk1'
		    ],
		    '/idtablaparentPKFK' => [
		        'key' => 'ONETOONE',
		        'refcol' => 'idtablaparentPK',
		        'reftable' => 'tablaParent',
		        'extra' => '',
		        'name' => 'tablaparentxcategory_fk1'
		    ]
		];
    }
    public static function toList($filter=null,$filterValue=null) {
        return self::_toList($filter,$filterValue);
    }
    public static function first($pk = null) {
        return self::_first($pk);
    }
    
    /**
     *  It returns true if the entity exists, otherwise false.<br>
     *  <b>Example:</b><br>
     *  <pre>
     *  $this->exist(['id'=>'a1','name'=>'name']); // using an array
     *  $this->exist('a1'); // using the primary key. The table needs a pks and it only works with the first pk.
     *  </pre>     
     *    
     * @param array|mixed $entity=self::factory()
     * @return bool true if the pks exists
     */
    public static function exist($entity) {
        return self::_exist($entity);
    }
    /**
     * @param array $entity=self::factory()
     * @param bool $transactional If true (default) then the operation is transaction
     * @return array|false=self::factory()
     */
    public static function insert(&$entity,$transactional=true) {
        return self::_insert($entity,$transactional);
    }
    
    /**
     * @param array $entity=self::factory()
     * @param bool $transactional If true (default) then the operation is transaction
     * @return array|false=self::factory()
     */
    public static function update($entity,$transactional=true) {
        return self::_update($entity,$transactional);
    }
    public static function delete($entity,$transactional=true) {
        return self::_delete($entity,$transactional);
    }
    public static function deleteById($pk,$transactional=true) {
        return self::_deleteById($pk,$transactional);
    }  
    public static function cleanRowDBtoPHP(&$row) {
        if(isset($row['LastDate'])) {
            $row['LastDate']=PdoOne::dateConvert($row['LastDate'],'sql','human');
        }
        if (isset($row['/IdBlogCategory']) && is_array($row['/IdBlogCategory'])) {
            $class='\\eftec\\mini_blog\\repo\\'.PdoOne::camelize('blogCategory').'Dao';
            $row['/IdBlogCategory']=$class::rowDBtoPHP($row['/IdBlogCategory']);
        }
    }
    public static function cleanRowPHPtoDB(&$row) {
        if(isset($row['LastDate'])) {
            $row['LastDate']=PdoOne::dateConvert($row['LastDate'],'sql','human');
        }
        if (isset($row['/IdBlogCategory']) && is_array($row['/IdBlogCategory'])) {
            $class='\\eftec\\mini_blog\\repo\\'.PdoOne::camelize('blogCategory').'Dao';
            $row['/IdBlogCategory']=$class::rowDBtoPHP($row['/IdBlogCategory']);
        }
    }

    public static function factory() {
        $recursive=static::getRecursive();
        return [
		'idtablaparentPKFK'=>0,
		'/idtablaparentPKFK'=>(in_array('/idtablaparentPKFK',$recursive)) 
		                            ? tablaParentRepo::factory() 
		                            : null, /* manytoone */
		'idcategoryPKFK'=>0,
		'/idcategoryPKFK'=>(in_array('/idcategoryPKFK',$recursive)) 
		                            ? tablacategoryRepo::factory() 
		                            : null, /* manytoone */
		];
    }
    public static function factoryNull() {
        return [
		'idtablaparentPKFK'=>null,
		'/idtablaparentPKFK'=>null, /* manytoone */
		'idcategoryPKFK'=>null,
		'/idcategoryPKFK'=>null, /* manytoone */
		];
    }     
     
}