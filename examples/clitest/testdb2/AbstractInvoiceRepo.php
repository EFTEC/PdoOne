<?php
/** @noinspection PhpUnusedParameterInspection
* @noinspection PhpClassConstantAccessedViaChildClassInspection
* @noinspection PhpClasspublic constantAccessedViaChildClassInspection
* @noinspection NullCoalescingOperatorCanBeUsedInspection
* @noinspection PhpPureAttributeCanBeAddedInspection
* @noinspection PhpArrayShapeAttributeCanBeAddedInspection
* @noinspection PhpMissingParamTypeInspection
* @noinspection AccessModifierPresentedInspection
* @noinspection PhpMissingReturnTypeInspection
* @noinspection UnknownInspectionInspection
* @noinspection PhpIncompatibleReturnTypeInspection
* @noinspection ReturnTypeCanBeDeclaredInspection
* @noinspection DuplicatedCode
* @noinspection PhpUnused
* @noinspection PhpUndefinedMethodInspection
* @noinspection PhpUnusedLocalVariableInspection
* @noinspection PhpUnusedAliasInspection
* @noinspection NullPointerExceptionInspection
* @noinspection SenselessProxyMethodInspection
* @noinspection PhpParameterByRefIsNotUsedAsReferenceInspection
*/
namespace eftec\examples\clitest\testdb2;
use eftec\PdoOne;
use eftec\PdoOneQuery;

use Exception;

/**
* Class AbstractInvoiceRepo. Copyright (c) Jorge Castro C. (https://github.com/EFTEC/PdoOne)<br>
* Generated by PdoOne Version 2.32.1 Date generated Sun, 05 Jun 2022 09:16:35 -0300.<br>
* <b>DO NOT EDIT THIS CODE</b>. This code is generated<br>
* If you want to make some changes, then add the changes to the Repository class.<br>
* <pre>
* $code=$pdoOne->generateCodeClass('invoices','eftec\examples\clitest\testdb2',array('Customer'=>NULL,'Date'=>NULL,'IdInvoice'=>NULL,'Total'=>NULL,'_Customer'=>'MANYTOONE','_invoicedetails'=>'ONETOMANY',),array('cities'=>'CityRepo','categories'=>'CategoryRepo','customers'=>'CustomerRepo','customerxcategories'=>'CustomerXCategoryRepo','invoicedetails'=>'InvoicedetailRepo','invoices'=>'InvoiceRepo','products'=>'ProductRepo',),array(),'','','Testdb2','',array(),array(),array('categories'=>array('IdCategory'=>'NumCategory','Name'=>'Name',),'cities'=>array('IdCity'=>'NumCity','Name'=>'NameCity',),'customers'=>array('City'=>'City','Email'=>'Email','IdCustomer'=>'NumCustomer','Name'=>'Name',),'customerxcategories'=>array('Category'=>'Category','Customer'=>'Customer',),'invoicedetails'=>array('IdInvoiceDetail'=>'NumInvoiceDetail','Invoice'=>'Invoice','Product'=>'Product','Quantity'=>'Quantity',),'invoices'=>array('Customer'=>'Customer','Date'=>'Date','IdInvoice'=>'NumInvoice','Total'=>'Total',),'products'=>array('City'=>'City','IdProducts'=>'Numproduct','Name'=>'Name',),));
* </pre>
*/
abstract class AbstractInvoiceRepo extends Testdb2
{
    public const TABLE = 'invoices';
    /** @var string A string with the name of the class. It is used to identify itself. */
    public const IDENTITY = 'IdInvoice';
    /** @var string[] An indexed array with the original name of the primary keys. Note: Only the first primary key is used */
    public const PK = [
	    'IdInvoice'
	];
    /** @var string A string with the name of the class. It is used to identify itself. */
    public const ME=__CLASS__;
    /** @var string|null $schema you can set the current schema/database used by this class. [Default is null] */
    public static $schema;

    //<editor-fold desc="definitions">
    public const EXTRACOLS='';
    /** @var string[][] an associative array with the definition of the columns */
    public const DEF=[
		    'IdInvoice' => [
		        'alias' => 'NumInvoice',
		        'phptype' => 'int',
		        'conversion' => null,
		        'type' => 'int',
		        'size' => null,
		        'null' => false,
		        'identity' => true,
		        'sql' => 'int not null auto_increment'
		    ],
		    'Customer' => [
		        'alias' => 'Customer',
		        'phptype' => 'int',
		        'conversion' => null,
		        'type' => 'int',
		        'size' => null,
		        'null' => true,
		        'identity' => false,
		        'sql' => 'int'
		    ],
		    'Total' => [
		        'alias' => 'Total',
		        'phptype' => 'float',
		        'conversion' => null,
		        'type' => 'decimal',
		        'size' => '9,4',
		        'null' => true,
		        'identity' => false,
		        'sql' => 'decimal(9,4)'
		    ],
		    'Date' => [
		        'alias' => 'Date',
		        'phptype' => 'date',
		        'conversion' => null,
		        'type' => 'date',
		        'size' => null,
		        'null' => true,
		        'identity' => false,
		        'sql' => 'date'
		    ]
		];
    /** @var string[][] an associative array with the definition of the foreign keys and relations */
    public const DEFFK=[
		    'Customer' => [
		        'key' => 'FOREIGN KEY',
		        'refcol' => 'IdCustomer',
		        'reftable' => 'customers',
		        'extra' => '',
		        'name' => 'invoices_fk1',
		        'alias' => '_Customer',
		        'refcolalias' => 'NumCustomer',
		        'refcol2alias' => null
		    ],
		    '_Customer' => [
		        'key' => 'MANYTOONE',
		        'refcol' => 'IdCustomer',
		        'reftable' => 'customers',
		        'extra' => '',
		        'name' => 'invoices_fk1',
		        'alias' => '_Customer',
		        'refcolalias' => 'NumCustomer',
		        'refcol2alias' => null
		    ],
		    '_invoicedetails' => [
		        'key' => 'ONETOMANY',
		        'col' => 'IdInvoice',
		        'reftable' => 'invoicedetails',
		        'refcol' => '_Invoice',
		        'alias' => '_invoicedetails',
		        'colalias' => 'NumInvoice',
		        'refcolalias' => 'Invoice',
		        'refcol2alias' => null
		    ]
		];
    public const DEFFKSQL=[
			    'Customer' => 'FOREIGN KEY REFERENCES`customers`(`IdCustomer`)'
			];
    /** @var string[] An indexed array with the name of the columns that are not inserted */
    public const DEFNOINSERT=[
		    'NumInvoice'
		];
    /** @var string[] An indexed array with the name of the columns that are not updated */
    public const DEFNOUPDATE=[
		    'NumInvoice'
		];
    /** @var string[] an associative array that associates the database column with its alias, ex: ['col'=>'colalias'] */
    public const COL2ALIAS=[
		    'IdInvoice' => 'NumInvoice',
		    'Customer' => 'Customer',
		    'Total' => 'Total',
		    'Date' => 'Date'
		];
    /** @var string[] an associative array that associates the alias with its database column, ex: ['colalias'=>'col'] */
    public const ALIAS2COL=[
		    'NumInvoice' => 'IdInvoice',
		    'Customer' => 'Customer',
		    'Total' => 'Total',
		    'Date' => 'Date'
		];
    //</editor-fold>


    /**
    * It returns the definitions of the columns<br>
    * <b>Example:</b><br>
    * <pre>
         * self::getDef(); // ['colName'=>[php type,php conversion type,type,size,nullable,extra,sql],'colName2'=>..]
         * self::getDef('sql'); // ['colName'=>'sql','colname2'=>'sql2']
         * self::getDef('identity',true); // it returns the columns that are identities ['col1','col2']
         * </pre>
    * <b>PHP Types</b>: binary, date, datetime, decimal/float,int, string,time, timestamp<br>
    * <b>PHP Conversions</b>:  datetime (datetime class), datetime2 (iso),datetime3 (human string)
    *                         , datetime4 (sql no conversion!), timestamp (int), bool, int, float<br>
    * <b>Param Types</b>: PDO::PARAM_LOB, PDO::PARAM_STR, PDO::PARAM_INT<br>
    *
    * @param string|null $column =['phptype','conversion','type','size','null','identity','sql'][$i]
    *                             if not null then it only returns the column specified.
    * @param string|null $filter If filter is not null, then it uses the column to filter the result.
    *
    * @return array|array[]
    */
    public static function getDef($column = null, $filter = null): array
    {
        $r = self::DEF;
        if ($column !== null) {
            if ($filter === null) {
                foreach ($r as $k => $v) {
                    $r[$k] = $v[$column];
                }
            } else {
                $new = [];
                foreach ($r as $k => $v) {
                    if ($v[$column] === $filter) {
                        $new[] = $k;
                    }
                }
                return $new;
            }
        }
        return $r;
    }

    /**
    * It converts a row returned from the database.<br>
    * If the column is missing then it sets the field as null.
    *
    * @param array $row [ref]
    */
    public static function convertOutputVal(&$row)
    {
        if ($row === false || $row === null) {
            return;
        }
		!isset($row['NumInvoice']) and $row['NumInvoice']=null; // int
		!isset($row['Customer']) and $row['Customer']=null; // int
		!isset($row['Total']) and $row['Total']=null; // decimal
		!isset($row['Date']) and $row['Date']=null; // date
		// $row['_Customer']['_NumCustomer']=&$row['Customer']; // linked field MANYTOONE

    }

    /**
    * It converts a row to be inserted or updated into the database.<br>
    * If the column is missing then it is ignored and not converted.
    *
    * @param array $row [ref]
    * @return array
    */
    public static function convertInputVal(&$row) {
        
        return self::convertAliasToDB($row);
    }


    /**
    * It gets all the name of the columns.
    *
    * @return string[]
    */
    public static function getDefName($alias=false) {
        if($alias) {
            return static::COL2ALIAS;
        }
        return [
		    'IdInvoice',
		    'Customer',
		    'Total',
		    'Date'
		];
    }

    /**
    * It returns an associative array (colname=>key type) with all the keys/indexes (if any)
    *
    * @return string[]
    */
    public static function getDefKey() {
        return [
		    'IdInvoice' => 'PRIMARY KEY',
		    'Customer' => 'KEY'
		];
    }

    /**
    * It returns a string array with the name of the columns that are skipped when insert
    * @return string[]
    */
    public static function getDefNoInsert() {
        return [
		    'NumInvoice'
		];
    }

    /**
    * It returns a string array with the name of the columns that are skipped when update
    * @return string[]
    */
    public static function getDefNoUpdate() {
        return [
		    'NumInvoice'
		];
    }

    /**
    * It adds a condition to the query pipeline. It could be stacked using multiple where()
    * <b>Example:</b><br>
    * <pre>
         * self::where(['col'=>'value'])::toList();
         * self::where(['col']=>['value'])::toList(); // s= string/double/date, i=integer, b=bool
         * self::where(['col=?']=>['value'])::toList(); // s= string/double/date, i=integer, b=bool
         * </pre>
    *
    * @param array|string   $sql =self::factoryUtil()
    * @param null|array|int $param
    *
    * @return PdoOneQuery
    */
    public static function where($sql, $param = PdoOne::NULL)
    {
        return static::newQuery()->where($sql, $param,false,InvoiceRepo::TABLE);
    }

    /**
    * It returns all the relational fields by type. '*' returns all types.<br>
    * It doesn't return normal columns.
    *
    * @param string $type=['*','MANYTOONE','ONETOMANY','ONETOONE','MANYTOMANY'][$i]
    *
    * @return string[]
    * @noinspection SlowArrayOperationsInLoopInspection
    */
    public static function getRelations($type = 'all')
    {
        $r = [
		    'MANYTOONE' => [
		        '_Customer'
		    ],
		    'ONETOMANY' => [
		        '_invoicedetails'
		    ]
		];
        if ($type === '*') {
            $result = [];
            foreach ($r as $arr) {
                $result = array_merge($result, $arr);
            }
            return $result;
        }
        return $r[$type] ?? [];
    }

    /**
    * @param array|int  $filter      (optional) if we want to filter the results.
    * @param array|null $filterValue (optional) the values of the filter
    * @return array|bool|null
    * @throws Exception
    */
    public static function toList($filter=PdoOne::NULL,$filterValue=null) {
        if(self::$useModel) {
            return false; // no model set
        }
        return self::_toList($filter, $filterValue);
    }

    /**
    * It sets the recursivity. By default, if we query or modify a value, it operates with the fields of the entity.
    * With recursivity, we could use the recursivity of the fields, for example, loading a MANYTOONE relation<br>
    * <b>Example:</b><br>
    * <pre>
         * self::setRecursive([]); // (default) no use recursivity.
         * self::setRecursive('*'); // recursive every MANYTOONE,ONETOONE,MANYTOONE and ONETOONE relations (first level)
         * self::setRecursive('MANYTOONE'); // recursive all relations of the type MANYTOONE (first level)
         * self::setRecursive(['_relation1','_relation2']); // recursive only the relations of the first level
         * self::setRecursive(['_relation1','_relation1/_subrelation1']); //recursive the relations (first and second level)
         * </pre>
    * If array then it uses the values to set the recursivity.<br>
    * If string then the values allowed are '*', 'MANYTOONE','ONETOMANY','MANYTOMANY','ONETOONE' (first level only)<br>
    *
    * @param string|array $recursive=self::factoryUtil();
    *
    * @return PdoOneQuery
    */
    public static function setRecursive($recursive=[])
    {
        if(is_string($recursive)) {
            $recursive=InvoiceRepo::getRelations($recursive);
        }
        return parent::_setRecursive($recursive);
    }

    /**
    * It adds an "limit" in a query. It depends on the type of database<br>
    * <b>Example:</b><br>
    * <pre>
         *      ->select("")->limit("10,20")->toList();
         * </pre>
    *
    * @param string $sql Input SQL query
    *
    * @return PdoOneQuery
    * @throws Exception
    * @test InstanceOf PdoOne::class,this('1,10')
    */
    public static function limit($sql) : PdoOneQuery
    {
        return static::newQuery()->limit($sql);
    }

    /**
    * It returns the first row of a query.<br>
    * <b>Example:</b><br>
    * <pre>
         * Repo::first(); // it returns the first value encountered.
         * Repo::first(2); // it returns the first value where the primary key is equals to 2 (simple primary key)
         * Repo::first([2,3]); // it returns the first value where the primary key is equals to 2 (multiple primary keys)
         * Repo::first(['id'=>2,'id2'=>3]); // it returns the first value where id=2 and id2=3 (multiple primary keys)
         * </pre>
    * @param array|mixed|null $pk [optional] Specify the value of the primary key.
    *
    * @return array|bool It returns false if not file is found.
    * @throws Exception
    */
    public static function first($pk = PdoOne::NULL) {
        if(self::$useModel) {
            /** @noinspection PhpIncompatibleReturnTypeInspection */
            return false; // no model set
        }
        return self::_first($pk);
    }

    /**
    *  It returns true if the entity exists, otherwise false.<br>
    *  <b>Example:</b><br>
    *  <pre>
         *  $this->exist(['id'=>'a1','name'=>'name']); // using an array
         *  $this->exist('a1'); // using the primary key. The table needs a pks and it only works with the first pk.
         *  </pre>
    *
    * @param array|mixed $entity =self::factoryUtil()
    *
    * @return bool true if the pks exists
    * @throws Exception
    */
    public static function exist($entity) {
        return self::_exist($entity);
    }

    /**
    * It inserts a new entity(row) into the database<br>
    * @param array|object $entity        =self::factoryUtil()
    * @param bool         $transactional If true (default) then the operation is transactional
    *
    * @return array|false=self::factoryUtil()
    * @throws Exception
    */
    public static function insert(&$entity,$transactional=true) {
        return self::_insert($entity,$transactional);
    }

    /**
    * It merge a new entity(row) into the database. If the entity exists then it is updated, otherwise the entity is
    * inserted<br>
    * @param array|object $entity        =self::factoryUtil()
    * @param bool         $transactional If true (default) then the operation is transactional
    *
    * @return array|false=self::factoryUtil()
    * @throws Exception
    */
    public static function merge(&$entity,$transactional=true) {
        return self::_merge($entity,$transactional);
    }

    /**
    * Updates an entity. It uses the primary key as condition.
    * @param array|object $entity        =self::factoryUtil()
    * @param bool         $transactional If true (default) then the operation is transactional<br>
    *                                    If false, then it allows to create your own transaction.
    * @return false|int=self::factoryUtil()
    * @throws Exception
    */
    public static function update($entity,$transactional=true) {
        return self::_update($entity,$transactional);
    }

    /**
     * It deletes an entity using an entity as condition
     *
     * @param array|object $entity =self::factoryUtil()
     * @param bool         $transactional If true (default) then the operation is transactional
     *
     * @return false|int
     * @throws Exception
     */
    public static function delete($entity,$transactional=true) {
        return self::_delete($entity,$transactional);
    }

    /**
    * It deletes an entity by the primary key.
    *
    * @param array|mixed $pk =self::factoryUtil()
    * @param bool        $transactional If true (default) then the operation is transactional
    *
    * @return int|false
    * @throws Exception
    */
    public static function deleteById($pk,$transactional=true) {
        return self::_deleteById($pk,$transactional);
    }

    /**
     * Returns an array with the default structure of an entity.
     *
     * @param array|null $values          =self::factoryUtil()
     * @param string     $recursivePrefix It is the prefix of the recursivity.
     *
     * @return array
     */
    public static function factory($values = null, $recursivePrefix = '') {
        $recursive=static::getRecursive();
        static::setRecursive(); // reset the recursivity.
        $row= [
		    'NumInvoice' => null,
		    'Customer' => null,
		    'Total' => null,
		    'Date' => null,
		    '_Customer' => [],
		    '_invoicedetails' => []
		];
		// $row['_Customer']['_NumCustomer']=&$row['Customer']; // linked field MANYTOONE

        if ($values !== null) {
            $row = array_merge($row, $values);
        }
        return $row;
    }

    /**
     * An associative array used to define the full structure of an entity.<br>
     * It is only used for autocomplete because it is prone to circular reference.
     *
     * @return array
     */
    public static function factoryUtil() {
        return [
		    'NumInvoice' => null,
		    'Customer' => null,
		    'Total' => null,
		    'Date' => null,
		    '_Customer' => CustomerRepo::factoryUtil(),
		    '_invoicedetails' => [InvoicedetailRepo::factoryUtil()]
		];
    }


}

