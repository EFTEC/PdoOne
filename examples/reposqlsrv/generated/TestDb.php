<?php
/** @noinspection PhpMissingParamTypeInspection
 * @noinspection PhpMissingReturnTypeInspection
 * @noinspection PhpMissingFieldTypeInspection
 * @noinspection UnknownInspectionInspection
 * @noinspection AccessModifierPresentedInspection
 * @noinspection PhpIncompatibleReturnTypeInspection
 * @noinspection ReturnTypeCanBeDeclaredInspection
 * @noinspection DuplicatedCode
 * @noinspection PhpUnused
 * @noinspection PhpUndefinedMethodInspection
 * @noinspection PhpUnusedLocalVariableInspection
 * @noinspection PhpUnusedAliasInspection
 * @noinspection NullPointerExceptionInspection
 * @noinspection SenselessProxyMethodInspection
 * @noinspection PhpParameterByRefIsNotUsedAsReferenceInspection
 */
namespace reposqlsrv;
use eftec\PdoOne;
use eftec\_BasePdoOneRepo;use eftec\PdoOneQuery;
use Exception;

/**
 * Class TestDb. Copyright (c) Jorge Castro C. (https://github.com/EFTEC/PdoOne)<br>
 * Generated by PdoOne Version 2.26 Date generated Sat, 19 Feb 2022 23:27:08 -0300.
 */
class TestDb extends _BasePdoOneRepo
{
    const type = 'sqlsrv';
    const COMPILEDVERSION=7;
    const NS = 'reposqlsrv\\';

    /**
     * @var bool if true then it uses objects (instead of array) in the
     * methods tolist(),first(),insert(),update() and delete()
     */
    public static $useModel=true;


    /** @var string[] it is used to set the relations betweeen table (key) and class (value) */
    const RELATIONS = [
	    'TableParent' => 'TableParentRepo',
	    'TableChild' => 'TableChildRepo',
	    'TableGrandChild' => 'TableGrandChildRepo',
	    'TableGrandChildTag' => 'TableGrandChildTagRepo',
	    'TableParentxCategory' => 'TableParentxCategoryRepo',
	    'TableCategory' => 'TableCategoryRepo',
	    'TableParentExt' => 'TableParentExtRepo'
	];
    /** @var PdoOne */
    public static $pdoOne;
    /** @var string|null $schema the current schema/database */
    public static $schema;
    /** @var PdoOneQuery */
    public static $pdoOneQuery;
    /** @var array $gQuery =[['columns'=>[],'joins'=>[],'where'=>[]] */
    public static $gQuery = [];
    public static $gQueryCounter = 0;
    public static $pageSize = 20;
    public static $lastException = '';
    /** @var bool if true then it returns a false on error. If false, it throws an exception in case of error */
    protected static $falseOnError = false;

    /** @var null|string the unique id generate by sha256 and based in the query, arguments, type and methods */
    protected static $uid;



    /**
     * With the name of the table, we get the class
     * @param string $tableName
     *
     * @return string[]
     */
    protected function tabletoClass($tableName) {
        return static::RELATIONS[$tableName];
    }

    /**
     * It sets the field self::$pdoOne
     *
     * @param $pdoOne
     */
    public static function setPdoOne($pdoOne)
    {
        static::$pdoOne = $pdoOne;
    }
    /**
     * It is used for DI.<br>
     * If the field is not null, it returns the field self::$pdoOne<br>
     * If the global function pdoOne exists, then it is used<br>
     * if the global variable $pdoOne exists, then it is used<br>
     * Otherwise, it returns null
     *
     * @return PdoOne
     */
    protected static function getPdoOne()
    {
        if (self::$pdoOne !== null) {
            return self::$pdoOne;
        }
        if (self::BINARYVERSION !== static::COMPILEDVERSION) {
            $p = new PdoOne('test', 'no database', '', '');
            $p->throwError('Repository classes requires a new version. Please update PdoOne and rebuild'
                , self::class);
        }

        if(PdoOne::instance(false)!==null) {
            self::$pdoOne=PdoOne::instance(false);
            return self::$pdoOne;
        }

        if (function_exists('PdoOne')) {
            self::$pdoOne = PdoOne();
            return self::$pdoOne;
        }
        if (isset($GLOBALS['pdoOne']) && $GLOBALS['pdoOne'] instanceof PdoOne) {
            self::$pdoOne = $GLOBALS['pdoOne'];
            return self::$pdoOne;
        }
        return self::$pdoOne;
    }
}
