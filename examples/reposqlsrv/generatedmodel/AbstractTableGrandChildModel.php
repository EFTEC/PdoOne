<?php
/** @noinspection PhpIncompatibleReturnTypeInspection
 * @noinspection ReturnTypeCanBeDeclaredInspection
 * @noinspection DuplicatedCode
 * @noinspection PhpUnused
 * @noinspection PhpUndefinedMethodInspection
 * @noinspection PhpUnusedLocalVariableInspection
 * @noinspection PhpUnusedAliasInspection
 * @noinspection NullPointerExceptionInspection
 * @noinspection SenselessProxyMethodInspection
 * @noinspection PhpParameterByRefIsNotUsedAsReferenceInspection
 */
namespace sqlsrv\repomodel;
use eftec\PdoOne;
use Exception;

/**
 * Class TableGrandChildModel. Copyright (c) Jorge Castro C. (https://github.com/EFTEC/PdoOne)<br>
 * Generated by PdoOne Version 2.26 Date generated Sat, 19 Feb 2022 23:27:09 -0300.<br>
 * <b>DO NOT EDIT THIS CODE. THIS CODE WILL SELF GENERATE.</b><br>
 * <pre>
 * $code=$pdoOne->generateAbstractModelClass({args});
 * </pre>
 */
abstract class AbstractTableGrandChildModel
{
	/** @var int $idgrandchildPK  */
	public $idgrandchildPK;
	/** @var string $NameGrandChild  */
	public $NameGrandChild;

	/** @var TableGrandChildTagModel[] $_TableGrandChildTag onetomany */
	public $_TableGrandChildTag;
	/** @var TableChildModel[] $_TableChild onetomany */
	public $_TableChild;


    /**
     * AbstractTableGrandChildModel constructor.
     *
     * @param array|null $array
     */
    public function __construct($array=null)
    {
        if($array===null) {
            return;
        }
        foreach($array as $k=>$v) {
            $this->{$k}=$v;
        }
    }

    //<editor-fold desc="array conversion">
    public static function fromArray($array) {
        if($array===null) {
            return null;
        }
        $obj=new TableGrandChildModel();
        		$obj->idgrandchildPK=isset($array['idgrandchildPK']) ?  $array['idgrandchildPK'] : null;
		$obj->NameGrandChild=isset($array['NameGrandChild']) ?  $array['NameGrandChild'] : null;
        		$obj->_TableGrandChildTag=isset($array['_TableGrandChildTag']) ?  
			$obj->_TableGrandChildTag=TableGrandChildTagModel::fromArrayMultiple($array['_TableGrandChildTag']) 
			: null; // onetomany
		$obj->_TableChild=isset($array['_TableChild']) ?  
			$obj->_TableChild=TableChildModel::fromArrayMultiple($array['_TableChild']) 
			: null; // onetomany

        return $obj;
    }

    /**
     * It converts the current object in an array
     *
     * @return mixed
     */
    public function toArray() {
        return static::objectToArray($this);
    }

    /**
     * It converts an array of arrays into an array of objects.
     *
     * @param array|null $array
     *
     * @return array|null
     */
    public static function fromArrayMultiple($array) {
        if($array===null) {
            return null;
        }
        $objs=[];
        foreach($array as $v) {
            $objs[]=self::fromArray($v);
        }
        return $objs;
    }
    //</editor-fold>

} // end class
