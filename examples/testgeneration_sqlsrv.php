<?php /** @noinspection PhpUnhandledExceptionInspection */

use eftec\PdoOne;

include '../vendor/autoload.php';
include "Collection.php";

// connecting to database sakila at 127.0.0.1 with user root and password abc.123

$pdoOne = new PdoOne('sqlsrv', 'PCJC\SQLEXPRESS', 'sa', 'abc.123', 'test', 'logpdoone.txt');
$pdoOne->logLevel = 3;
$pdoOne->throwOnError = true;
$pdoOne->open();

var_dump(table_1Repo2::validTable());
die(1);


Table_1Repo::truncate();

echo "<h1>Testing the generation of code</h1>The table must exists<br>";


Table_1Repo::insert(["t1"=>'1',"t2"=>2,"t3"=>'4',"t4"=>0.0,"t5"=>0.0,"t6"=>0,"t"=>'7']);
Table_1Repo::insert(["t1"=>'2',"t2"=>3,"t3"=>'5',"t4"=>0.0,"t5"=>0.0,"t6"=>0,"t"=>'8']);
Table_1Repo::insert(["t1"=>'3',"t2"=>4,"t3"=>'6',"t4"=>0.0,"t5"=>0.0,"t6"=>0,"t"=>'8']);
Table_1Repo::update(["t1"=>'3',"t2"=>4,"t3"=>'6',"t4"=>44.0,"t5"=>55.0,"t6"=>6,"t"=>'8']);
Table_1Repo::delete(2);
echo "<br>get(1)<br>";
echo \mapache_commons\Collection::generateTable(Table_1Repo::get(1));
echo "<br>select(1)<br>";
echo \mapache_commons\Collection::generateTable(Table_1Repo::select());



// ********** the next code is generated by the cli
class Table_1Repo
{

    const TABLE = 'table_1';
    const PK = 't1';
    /** @var PdoOne */
    public static $pdoOne = null;

    /**
     * It creates a new table<br>
     * If the table exists then the operation is ignored (and it returns false)
     *
     * @param array $definition
     * @param null  $extra
     *
     * @return array|bool|PDOStatement
     * @throws Exception
     */
    public static function createTable($definition, $extra = null) {
        if (!self::getPdoOne()->tableExist(self::TABLE)) {
            return self::getPdoOne()->createTable(self::TABLE, $definition, self::PK, $extra);
        }
        return false; // table already exist
    }

    /**
     * It is used for DI.<br>
     * If the field is not null, it returns the field self::$pdoOne<br>
     * If the global function pdoOne exists, then it is used<br>
     * if the globla variable $pdoOne exists, then it is used<br>
     * Otherwise, it returns null
     *
     * @return PdoOne
     */
    protected static function getPdoOne() {
        if (self::$pdoOne !== null) {
            return self::$pdoOne;
        }
        if (function_exists('pdoOne')) {
            return pdoOne();
        }
        if (isset($GLOBALS['pdoOne'])) {
            return $GLOBALS['pdoOne'];
        }
        return null;
    }

    /**
     * It sets the field self::$pdoOne
     *
     * @param $pdoOne
     */
    public static function setPdoOne($pdoOne) {
        self::$pdoOne = $pdoOne;
    }

    /**
     * It cleans the whole table (delete all rows)
     *
     * @return array|bool|PDOStatement
     * @throws Exception
     */
    public static function truncate() {
        return self::getPdoOne()->truncate(self::TABLE);
    }

    /**
     * It drops the table (structure and values)
     *
     * @return array|bool|PDOStatement
     * @throws Exception
     */
    public static function dropTable() {
        if (!self::getPdoOne()->tableExist(self::TABLE)) {
            return self::getPdoOne()->dropTable(self::TABLE);
        }
        return false; // table does not exist
    }

    /**
     * Insert an new row
     *
     * @param array $obj =["t1"=>'',"t2"=>0,"t3"=>'',"t4"=>0.0,"t5"=>0.0,"t6"=>0,"t"=>'']
     *
     * @return mixed
     * @throws Exception
     */
    public static function insert($obj) {
        return self::getPdoOne()->insertObject(self::TABLE, $obj);
    }

    /**
     * Update an registry
     *
     * @param array $obj =["t1"=>'',"t2"=>0,"t3"=>'',"t4"=>0.0,"t5"=>0.0,"t6"=>0,"t"=>'']
     *
     * @return mixed
     * @throws Exception
     */
    public static function update($obj) {
        return self::getPdoOne()->from(self::TABLE)
            ->set($obj)
            ->where(self::PK, $obj[self::PK])
            ->update();
    }

    /**
     * It deletes a registry
     *
     * @param mixed $pk
     *
     * @return mixed
     * @throws Exception
     */
    public static function delete($pk) {
        return self::getPdoOne()->from(self::TABLE)
            ->where(self::PK, $pk)
            ->delete();
    }

    /**
     * It gets a registry using the primary key.
     *
     * @param mixed $pk
     *
     * @return ["t1"=>'',"t2"=>0,"t3"=>'',"t4"=>0.0,"t5"=>0.0,"t6"=>0,"t"=>'']
     * @throws Exception
     */
    public static function get($pk) {
        return self::getPdoOne()->select('*')
            ->from(self::TABLE)
            ->where(self::PK, $pk)
            ->first();
    }

    /**
     * It returns a list of rows
     *
     * @param null|array  $where =["t1"=>'',"t2"=>0,"t3"=>'',"t4"=>0.0,"t5"=>0.0,"t6"=>0,"t"=>'']
     * @param null|string $order
     * @param null|string $limit
     *
     * @return [["t1"=>'',"t2"=>0,"t3"=>'',"t4"=>0.0,"t5"=>0.0,"t6"=>0,"t"=>'']]
     * @throws Exception
     */
    public static function select($where = null, $order = null, $limit = null) {
        return self::getPdoOne()->select('*')
            ->from(self::TABLE)
            ->where($where)
            ->order($order)
            ->limit($limit)
            ->toList();
    }

    /**
     * It returns the number of rows
     *
     * @param null|array $where =["t1"=>'',"t2"=>0,"t3"=>'',"t4"=>0.0,"t5"=>0.0,"t6"=>0,"t"=>'']
     *
     * @return int
     * @throws Exception
     */
    public static function count($where = null) {
        return (int)self::getPdoOne()->count()
            ->from(self::TABLE)
            ->where($where)
            ->firstScalar();
    }
}



/**
 * Generated by PdoOne Version 1.28.1
 * Class table_1Repo
 */
class table_1Repo2
{
    const TABLE = 'table_1';
    const PK = 't1';

    const DEF=array (
        't1' => 'int(10) NOT NULL',
        't2' => 'int(10)',
        't3' => 'varchar(50) DEFAULT (\'IT IS A DEFAULT VALUE\')',
        't4' => 'decimal(18,2)',
        't5' => 'float(53)',
        't6' => 'tinyint(3)',
        't' => 'nchar(10)',
    );

    /** @var PdoOne */
    public static $pdoOne = null;

    /**
     * It creates a new table<br>
     * If the table exists then the operation is ignored (and it returns false)
     *
     * @param array $definition
     * @param null  $extra
     *
     * @return array|bool|PDOStatement
     * @throws Exception
     */
    public static function createTable($definition=null, $extra = null) {
        if (!self::getPdoOne()->tableExist(self::TABLE)) {
            if($definition===null) $definition=self::DEF;
            return self::getPdoOne()->createTable(self::TABLE, $definition, self::PK, $extra);
        }
        return false; // table already exist
    }

    /**
     * It validates the table and returns an associative array with the errors.
     *
     * @return array If valid then it returns an empty array
     * @throws Exception
     */
    public static function validTable() {
        return PdoOne::validateDefTable(self::getPdoOne(),self::TABLE,self::DEF);
    }

    /**
     * It is used for DI.<br>
     * If the field is not null, it returns the field self::$pdoOne<br>
     * If the global function pdoOne exists, then it is used<br>
     * if the globla variable $pdoOne exists, then it is used<br>
     * Otherwise, it returns null
     *
     * @return PdoOne
     */
    protected static function getPdoOne() {
        if (self::$pdoOne !== null) {
            return self::$pdoOne;
        }
        if (function_exists('pdoOne')) {
            return pdoOne();
        }
        if (isset($GLOBALS['pdoOne'])) {
            return $GLOBALS['pdoOne'];
        }
        return null;
    }

    /**
     * It sets the field self::$pdoOne
     *
     * @param $pdoOne
     */
    public static function setPdoOne($pdoOne) {
        self::$pdoOne = $pdoOne;
    }

    /**
     * It cleans the whole table (delete all rows)
     *
     * @return array|bool|PDOStatement
     * @throws Exception
     */
    public static function truncate() {
        return self::getPdoOne()->truncate(self::TABLE);
    }

    /**
     * It drops the table (structure and values)
     *
     * @return array|bool|PDOStatement
     * @throws Exception
     */
    public static function dropTable() {
        if (!self::getPdoOne()->tableExist(self::TABLE)) {
            return self::getPdoOne()->dropTable(self::TABLE);
        }
        return false; // table does not exist
    }

    /**
     * Insert an new row
     *
     * @param array $obj =["t1"=>???int identity,"t2"=>0,"t3"=>'',"t4"=>0.0,"t5"=>0.0,"t6"=>0,"t"=>'']
     *
     * @return mixed
     * @throws Exception
     */
    public static function insert($obj) {
        return self::getPdoOne()->insertObject(self::TABLE, $obj);
    }

    /**
     * Update an registry
     *
     * @param array $obj =["t1"=>???int identity,"t2"=>0,"t3"=>'',"t4"=>0.0,"t5"=>0.0,"t6"=>0,"t"=>'']
     *
     * @return mixed
     * @throws Exception
     */
    public static function update($obj) {
        return self::getPdoOne()->from(self::TABLE)
            ->set($obj)
            ->where(self::PK, $obj[self::PK])
            ->update();
    }

    /**
     * It deletes a registry
     *
     * @param mixed $pk
     *
     * @return mixed
     * @throws Exception
     */
    public static function delete($pk) {
        return self::getPdoOne()->from(self::TABLE)
            ->where(self::PK, $pk)
            ->delete();
    }

    /**
     * It gets a registry using the primary key.
     *
     * @param mixed $pk
     *
     * @return ["t1"=>???int identity,"t2"=>0,"t3"=>'',"t4"=>0.0,"t5"=>0.0,"t6"=>0,"t"=>'']
     * @throws Exception
     */
    public static function get($pk) {
        return self::getPdoOne()->select('*')
            ->from(self::TABLE)
            ->where(self::PK, $pk)
            ->first();
    }

    /**
     * It returns a list of rows
     *
     * @param null|array $where =["t1"=>???int identity,"t2"=>0,"t3"=>'',"t4"=>0.0,"t5"=>0.0,"t6"=>0,"t"=>'']
     * @param null|string $order
     * @param null|string $limit
     *
     * @return [["t1"=>???int identity,"t2"=>0,"t3"=>'',"t4"=>0.0,"t5"=>0.0,"t6"=>0,"t"=>'']]
     * @throws Exception
     */
    public static function select($where = null, $order = null, $limit = null) {
        return self::getPdoOne()->select('*')
            ->from(self::TABLE)
            ->where($where)
            ->order($order)
            ->limit($limit)
            ->toList();
    }

    /**
     * It returns the number of rows
     *
     * @param null|array $where =["t1"=>???int identity,"t2"=>0,"t3"=>'',"t4"=>0.0,"t5"=>0.0,"t6"=>0,"t"=>'']
     *
     * @return int
     * @throws Exception
     */
    public static function count($where = null) {
        return (int)self::getPdoOne()->count()
            ->from(self::TABLE)
            ->where($where)
            ->firstScalar();
    }
}
